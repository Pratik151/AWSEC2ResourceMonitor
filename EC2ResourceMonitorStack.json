{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "DefaultTeamEmailParameter": {
      "Type": "String",
      "Description": "Enter subscription email for default SNS topic."
    },
    "LambdaRoleName": {
      "Type": "String",
      "Default": "metrics_monitor_lambda_role",
      "Description": "Enter role name to be used for IAM Role which will be created for Lambda."
    }
  },
  "Resources": {
    "CloudTrailIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "cloudtrail.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "DefaultPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents",
                    "logs:CreateLogStream"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "RoleName": "EC2CloudTrailIAMRole"
      }
    },
    "S3Bucket": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3Bucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Bucket"
                    }
                  ]
                ]
              }
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Bucket"
                    },
                    "/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "CloudLogGroup": {
      "DependsOn": [
        "BucketPolicy"
      ],
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "CloudTrailLogsGroup"
      }
    },
    "CloudTrailForEC2Events": {
      "Type": "AWS::CloudTrail::Trail",
      "Properties": {
        "CloudWatchLogsLogGroupArn": {
          "Fn::GetAtt": [
            "CloudLogGroup",
            "Arn"
          ]
        },
        "CloudWatchLogsRoleArn": {
          "Fn::GetAtt": [
            "CloudTrailIAMRole",
            "Arn"
          ]
        },
        "IsLogging": "true",
        "IsMultiRegionTrail": "true",
        "S3BucketName": {
          "Ref": "S3Bucket"
        },
        "IncludeGlobalServiceEvents": "true"
      }
    },
    "CloudWatchCreateAlarmIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudWatchPutAndEC2ReadRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:Describe*",
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DeleteAlarms",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "sns:CreateTopic",
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "LambdaRoleName"
              }
            ]
          ]
        }
      }
    },
    "defaultSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "DefaultTeamEmailParameter"
            },
            "Protocol": "email"
          }
        ],
        "TopicName": "defaultTeam"
      }
    },
    "CreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3\nimport base64\nimport gzip\nimport json\nimport base64\n\nDEFAULT_THRESHOLD_VALUE = 90.0\nDEFAULT_TEAM_VALUE = 'defaultTeam'\n\ndef create_sns_topic(topic_name, region):\n    client = boto3.client('sns', region_name=region)\n    response = client.create_topic(Name=topic_name)\n    return response\n\ndef get_ec2_tags(ec2_instanceId, region):\n    ec2 = boto3.resource('ec2', region_name=region)\n    thresholdValue = None\n    teamValue = None\n    ec2instance = ec2.Instance(ec2_instanceId)\n    print(ec2_instanceId)\n    print(ec2instance)\n    all_tags = ec2instance.tags\n    if all_tags is None:\n        return (None, None)\n\n    for tag in all_tags:\n        if tag['Key'] == 'Threshold':\n            thresholdValue = tag['Value']\n        if tag['Key'] == 'Team':\n            teamValue = tag['Value']\n\n    return (thresholdValue, teamValue)\n\ndef create_cloudwatch_alarm(instance_id, thresholdValue, teamValue, region):\n    sns_create_response = create_sns_topic(teamValue, region)\n    print(sns_create_response)\n    sns_topic_arn = sns_create_response['TopicArn']\n    cloudwatch = boto3.client('cloudwatch', region_name=region)\n    # Create alarm\n    cloudwatch_response = cloudwatch.put_metric_alarm(\n            AlarmName='CPU_Monitor_' + instance_id,\n            ComparisonOperator='GreaterThanThreshold',\n            EvaluationPeriods=1,\n            MetricName='CPUUtilization',\n            Namespace='AWS/EC2',\n            Period=60,\n            Statistic='Average',\n            Threshold=float(thresholdValue),\n            AlarmActions=[sns_topic_arn],\n            AlarmDescription='Alarm when server CPU exceeds 70%',\n            Dimensions=[\n                {\n                  'Name': 'InstanceId',\n                'Value': instance_id\n                },\n            ]        \n        )\n    print(cloudwatch_response)\n\ndef lambda_handler(event, context):\n    # TODO implement\n    print(event)\n    thresholdValue = DEFAULT_THRESHOLD_VALUE\n    teamValue = DEFAULT_TEAM_VALUE\n    cw_data = event['awslogs']['data']\n    #print(f'data: {cw_data}')\n    #print(f'type: {type(cw_data)}')\n    compressed_payload = base64.b64decode(cw_data)\n    uncompressed_payload = gzip.decompress(compressed_payload)\n    payload = json.loads(uncompressed_payload)\n    logEvents = payload['logEvents']\n    #print(logEvents)\n    for event in logEvents:\n        message = event['message']\n        #print(event)\n        message = json.loads(message)\n        print(message['eventName'])\n        if message['eventName'] == 'RunInstances':\n            region = message['awsRegion']\n            instance_id = message['responseElements']['instancesSet']['items'][0]['instanceId']\n            thresholdValue, teamValue = get_ec2_tags(instance_id, region)\n            if thresholdValue is None:\n                thresholdValue = DEFAULT_THRESHOLD_VALUE\n            if teamValue is None:\n                teamValue = DEFAULT_TEAM_VALUE\n            create_cloudwatch_alarm(instance_id, thresholdValue, teamValue, region)\n\n        elif message['eventName'] == 'TerminateInstances':\n            region = message['awsRegion']\n            instance_id = message['responseElements']['instancesSet']['items'][0]['instanceId']\n            cloudwatch = boto3.client('cloudwatch', region_name=region)\n            alarm_name = 'CPU_Monitor_' + instance_id\n            response = cloudwatch.delete_alarms(\n                AlarmNames=[\n                    alarm_name\n                    ]\n                )\n            print(response)\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Success')\n    }\n"
        },
        "Handler": "index.lambda_handler",
        "FunctionName": "Ec2LambdaFunctionTrigger",
        "Role": {
          "Fn::GetAtt": [
            "CloudWatchCreateAlarmIAMRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 300
      }
    },
    "CloudWatchLogGroupSubscriptionToLambda": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt": [
            "CreateLambdaFunction",
            "Arn"
          ]
        },
        "FilterPattern": "{ $.eventName = \"RunInstances\" || $.eventName = \"TerminateInstances\" }",
        "LogGroupName": {
          "Ref": "CloudLogGroup"
        }
      }
    },
    "PermissionForCloudWatchLogs": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "logs.",
              {
                "Ref": "AWS::Region"
              },
              ".amazonaws.com"
            ]
          ]
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudLogGroup",
            "Arn"
          ]
        }
      }
    }
  }
}
